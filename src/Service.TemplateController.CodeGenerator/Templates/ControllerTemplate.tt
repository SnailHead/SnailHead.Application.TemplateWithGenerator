<#@ template visibility="internal" #>
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Pepegov.MicroserviceFramework.ApiResults;
using Pepegov.MicroserviceFramework.AspNetCore.WebApi;
using Pepegov.MicroserviceFramework.Data.Exceptions;
using Service.TemplateController.BL.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Service.TemplateController.DAL.Entities;
using System.Net;
using Pepegov.UnitOfWork.Entityes;
using Service.TemplateController.PL.Models.Filters;

namespace Service.TemplateController.PL.Controllers;

[Route("/<#= EntityDescription.PluralName.PascalToKebabCase() #>")]
public class <#= EntityDescription.PluralName #>Controller : ControllerBase
{
	private readonly I<#= ServiceName #> _<#= ServiceName.ToFirstLower() #>;

	public <#= EntityDescription.PluralName #>Controller(I<#= ServiceName #> <#= ServiceName.ToFirstLower() #>)
	{
		_<#= ServiceName.ToFirstLower() #> = <#= ServiceName.ToFirstLower() #>;
	}
	<#
	if (NeedFilter)
	{
	#>[HttpPost]<#
	}
	else
	{
	#>[HttpGet]<#
	}
	#>

	[ProducesResponseType(typeof(ApiResult<<#= EntityDescription.PluralName #>>), StatusCodes.Status200OK)]
	[Route("get-paged-list")]
	public async Task<IResult> GetPagedList(<#if (NeedFilter) {#>[FromBody] <#= EntityDescription.PluralName #>FilterModel filter,<#}#> [FromQuery] int page = 1, int pageSize = 20)
	{
		var pagedList = await _<#= ServiceName.ToFirstLower() #>.GetPagedListAsync(page, pageSize, cancellationToken: HttpContext.RequestAborted);
		return Results.Extensions.Custom(new ApiResult<IPagedList<<#= EntityDescription.PluralName #>>>(pagedList, HttpStatusCode.OK));
	}

	[HttpGet]
	[ProducesResponseType(typeof(ApiResult<<#= EntityDescription.PluralName #>>), StatusCodes.Status200OK)]
	[ProducesResponseType(typeof(ApiResult), StatusCodes.Status400BadRequest)]
	[Route("get-by-id")]
	public async Task<IResult> GetById(Guid id)
	{
		var entity = await _<#= ServiceName.ToFirstLower() #>.GetByIdAsync(id, cancellationToken: HttpContext.RequestAborted);
		if (entity is null)
		{
			return Results.Extensions.Custom(new ApiResult(HttpStatusCode.NotFound, new MicroserviceNotFoundException($"<#= EntityDescription.PluralName #> with id {id} not found")));
		}
		return Results.Extensions.Custom(new ApiResult<<#= EntityDescription.PluralName #>>(entity, HttpStatusCode.OK));
	}

	[HttpPost]
	[ValidateAntiForgeryToken]
	[ProducesResponseType(typeof(ApiResult<<#= EntityDescription.PluralName #>>), StatusCodes.Status200OK)]
	[ProducesResponseType(typeof(ApiResult), StatusCodes.Status400BadRequest)]
	[Route("update")]
	public async Task<IResult> Update(<#= EntityDescription.Name #> model)
	{
		var result = await _<#= ServiceName.ToFirstLower() #>.UpdateAsync(model, cancellationToken: HttpContext.RequestAborted);
		if (result is null)
		{
			return Results.Extensions.Custom(new ApiResult<<#= EntityDescription.Name #>>(HttpStatusCode.BadRequest, new MicroserviceInvalidOperationException("Update <#= EntityDescription.Name #> failed")));
		}
		return Results.Extensions.Custom(new ApiResult<<#= EntityDescription.Name #>>(model, HttpStatusCode.OK));
	}

	[HttpPost]
	[ValidateAntiForgeryToken]
	[ProducesResponseType(typeof(ApiResult<<#= EntityDescription.PluralName #>>), StatusCodes.Status200OK)]
	[ProducesResponseType(typeof(ApiResult), StatusCodes.Status400BadRequest)]
	[Route("create")]
	public async Task<IResult> Create(<#= EntityDescription.Name #> model)
	{
		var result = await _<#= ServiceName.ToFirstLower() #>.CreateAsync(model, cancellationToken: HttpContext.RequestAborted);
		if (result is null)
		{
			return Results.Extensions.Custom(new ApiResult<<#= EntityDescription.PluralName #>>(HttpStatusCode.BadRequest, new MicroserviceInvalidOperationException("Update <#= EntityDescription.Name #> failed")));
		}
		return Results.Extensions.Custom(new ApiResult<<#= EntityDescription.Name #>>(model, HttpStatusCode.OK));
	}
	
	[HttpDelete]
	[Route("delete")]
	[ProducesResponseType(typeof(ApiResult), StatusCodes.Status200OK)]
	[ProducesResponseType(typeof(ApiResult), StatusCodes.Status400BadRequest)]
	public async Task<IResult> Delete(Guid id)
	{
		var result = await _<#= ServiceName.ToFirstLower() #>.DeleteAsync(id, cancellationToken: HttpContext.RequestAborted);
		if (!result)
		{
			return Results.Extensions.Custom(new ApiResult(HttpStatusCode.BadRequest, new MicroserviceInvalidOperationException("Delete <#= EntityDescription.PluralName #> failed")));
		}
		return Results.Extensions.Custom(new ApiResult(HttpStatusCode.OK));
	}
}

<#+
	internal EntityDescription EntityDescription;
	internal int MaxLineWidth;
	internal bool NeedFilter;
	internal string ServiceName;
	internal ControllerTemplate(EntityDescription entityDescription, int maxLineWidth) {
		EntityDescription = entityDescription;
		MaxLineWidth = maxLineWidth;
		NeedFilter = entityDescription.FilterProperties.Count > 0;
		ServiceName = EntityDescription.PluralName + "Service";
	}
#>
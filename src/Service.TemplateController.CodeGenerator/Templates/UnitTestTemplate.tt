<#@ template visibility="internal" #>
using Bogus;
using Microsoft.Extensions.DependencyInjection;
using Pepegov.UnitOfWork;
using Pepegov.UnitOfWork.EntityFramework;
using Pepegov.UnitOfWork.EntityFramework.Repository;
using Service.TemplateController.BL.Services.Interfaces;
using Service.TemplateController.DAL.Entities;
using Service.TemplateController.Test.MockData;
using <#= EntityDescription.Name #> = Service.TemplateController.DAL.Entities.<#= EntityDescription.Name #>;

namespace Service.TemplateController.Test.Tests;

public class <#= ServiceName #>Test  : BaseServiceTest<<#= EntityDescription.Name #>>
{
	private I<#= ServiceName #> _service = null!;
    private IServiceScope _scope = null!; 
    private readonly MockBase<<#= EntityDescription.Name #>> _mock = new Mock<#= EntityDescription.Name #>();

    [SetUp]
    public void SetUp()
    {
        _scope = DIProvider.ServiceProvider.CreateScope();
        UnitOfWorkEntityFrameworkInstance = DIProvider.ServiceProvider.GetRequiredService<IUnitOfWorkManager>()
            .GetInstance<IUnitOfWorkEntityFrameworkInstance>();
        Repository = UnitOfWorkEntityFrameworkInstance.GetRepository<<#= EntityDescription.Name #>>();
        _service = _scope.ServiceProvider.GetRequiredService<I<#= ServiceName #>>();
        BaseService = _service;
        Mock = _mock;
    }
    [Test]
    public new async Task CreateEntity_Success()
    {
        await base.CreateEntity_Success();
    }
    [Test]
    public new async Task DeleteEntity_Success()
    {
        await base.DeleteEntity_Success();
    }
    [Test]
    public new async Task GetPaged_Success()
    {
        await base.GetPaged_Success();
    }
}


<#+
	internal EntityDescription EntityDescription;
	internal int MaxLineWidth;
	internal string ServiceName;
	internal UnitTestTemplate(EntityDescription entityDescription, int maxLineWidth) {
		EntityDescription = entityDescription;
		MaxLineWidth = maxLineWidth;
		ServiceName = EntityDescription.PluralName + "Service";
		
	}
#>